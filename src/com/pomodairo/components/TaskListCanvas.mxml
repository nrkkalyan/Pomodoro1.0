<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="320" height="300"
	initialize="init()"	horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.controls.Alert;
			import com.pomodairo.events.PomodoroEvent;
			import com.pomodairo.components.CustomRenderer;
			import com.pomodairo.PomodoroEventDispatcher;
			import com.pomodairo.Pomodoro;
			import com.pomodairo.TableUtils;
			import com.pomodairo.db.Storage;
			
			[Bindable]
			private var db:Storage = Storage.instance;

			[Bindable]
			private var taskMenu:NativeMenu = new NativeMenu();
			
			private function init():void {
				db.initAndOpenDatabase();
				populateTaskMenu();
			}
			
			private function populateTaskMenu():void
			{
				var menuitem:NativeMenuItem = new NativeMenuItem("Show...");
     			menuitem.addEventListener(Event.SELECT, showName);
				taskMenu.addItem(menuitem);
				
				var edit:NativeMenuItem = new NativeMenuItem("Edit...");
     			edit.addEventListener(Event.SELECT, onEditPomodoroClicked);
				taskMenu.addItem(edit);				
				
				var done:NativeMenuItem = new NativeMenuItem("Mark/unmark done");
     			done.addEventListener(Event.SELECT, onDonePomodoroClicked);
				taskMenu.addItem(done);
				
				var remove:NativeMenuItem = new NativeMenuItem("Remove");
     			remove.addEventListener(Event.SELECT, onRemovePomodoroClicked);
				taskMenu.addItem(remove);

				// Separator by last task based menu item. Menu items below are for 'all'
				taskMenu.addItem(new NativeMenuItem("", true));

				var clean:NativeMenuItem = new NativeMenuItem("Clean all done");
     			clean.addEventListener(Event.SELECT, onClosePomodoroClicked);
				taskMenu.addItem(clean);
				
				var copy:NativeMenuItem = new NativeMenuItem("Copy to clipboard");
     			copy.addEventListener(Event.SELECT, copyTableToClipboard);
				taskMenu.addItem(copy);
				
			}
			
			private function onUsersDataGridChanged(event:Event):void{}
			
			private function onDragComplete(event:Event):void
			{
				updatePrios();
			}
			
			private function updatePrios():void
			{
				var i:int = pomodorosDataGrid.rowCount - 1;
				for each (var pom:Pomodoro in pomodorosDataGrid.dataProvider) {
					pom.ordinal = i--;
					db.updateOrdinal(pom);			        
				}
			}
	        
	        private function onRemovePomodoroClicked(event:Event=null):void
	        {
	        	db.remove(pomodorosDataGrid.selectedItem as Pomodoro);
	        }
	        
			private function onAddPomodoroClicked(event:Event=null):void
	        {
	        	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_POMODORO;
            	input.selectAfterCreate = true;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
	        } 
	        
			private function onEditPomodoroClicked(event:Event=null):void
	        {
	        	var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
	        	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_EDIT;
            	input.selectAfterCreate = true;
            	input.reference = pom;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
	        }	        
	        
	        private function onStartPomodoroClicked(event:Event=null):void
	        {
	        	var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
	        	var evt:PomodoroEvent = new PomodoroEvent(PomodoroEvent.SELECTED);
	        	evt.pomodoro = pom;
	        	PomodoroEventDispatcher.getInstance().dispatchEvent(evt);
	        } 
	        
	        private function onDonePomodoroClicked(event:Event=null):void
	        {
	        	if (!pomodorosDataGrid.selectedItem) return;
	        		
	        	var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
	        	if(pom.done) {
	        		pom.closed = null;
	        	}
	        	else {
	        		pom.closed = new Date();
	        	}
	        	pom.done = !pom.done;
	        	// Following is done by event listener in db object.
	        	// db.markDone(pom);
	        	// Dispatch event.
	        	var evt:PomodoroEvent = new PomodoroEvent(PomodoroEvent.DONE);
	        	evt.pomodoro = pom;
	        	PomodoroEventDispatcher.getInstance().dispatchEvent(evt);
	        }	  
	        
	        private function onClosePomodoroClicked(event:Event=null):void
	        {
				for each (var pom:Pomodoro in db.dataset) {
					if (pom.done) {
			        	pom.visible = false;
			        	db.updateVisibility(pom);
		   			}
				}
	        }	
	        
			public function copyTableToClipboard(event:Event=null):void
			{
				var data:Array = db.dataset;
				var tmpString:String = new TableUtils().getPomodorosTableAsCsv(data);
				System.setClipboard(tmpString);
			}
			
			
			private function displayMenu(evt:Event):void 
			{
				pomodorosDataGrid.selectedIndex = lastRollOverIndex;
				var loc:Point = contentToGlobal(new Point(contentMouseX, contentMouseY));
        		taskMenu.display(this.stage, loc.x, loc.y);
			}
			
			private function showName(evt:Event):void 
			{
				var pom:Pomodoro = pomodorosDataGrid.selectedItem as Pomodoro;
				Alert.show("Name: " + pom.name+"\nEstimated: "+pom.estimated+"\nWorked: "+pom.pomodoros+"\nInterruptions: "+pom.interruptions);
			}

		]]>
	</mx:Script>
	
	<mx:Number id="lastRollOverIndex" />

	<mx:DataGrid id="pomodorosDataGrid"
		dataProvider="{db.dataset}" 
		height="261"
		editable="false"
		rightClick="displayMenu(event);"
		itemRollOver="lastRollOverIndex = event.rowIndex"
		itemClick="onStartPomodoroClicked(event);"
		dragMoveEnabled="true"
		dragEnabled="true"
		dropEnabled="true"
		dragComplete="onDragComplete(event)"
		change="onUsersDataGridChanged(event)" width="100%" >
		<mx:columns>
			<mx:DataGridColumn width="125" headerText="Name" dataField="name" itemRenderer="com.pomodairo.components.CustomRenderer" />
			<mx:DataGridColumn width="28" headerText="E" dataField="estimated" dataTipField="estimatedDescription" showDataTips="true" itemRenderer="com.pomodairo.components.CustomRenderer" />
			<mx:DataGridColumn width="28" headerText="P" dataField="pomodoros" dataTipField="pomodorosDescription" showDataTips="true" itemRenderer="com.pomodairo.components.CustomRenderer" />
			<mx:DataGridColumn width="28" headerText="U" dataField="unplanned" dataTipField="unplannedDescription" showDataTips="true" itemRenderer="com.pomodairo.components.CustomRenderer" />
			<mx:DataGridColumn width="28" headerText="I" dataField="interruptions" dataTipField="interruptionsDescription" showDataTips="true" itemRenderer="com.pomodairo.components.CustomRenderer" />
			<!-- Useful for debugging ordinal stuff --> <!-- <mx:DataGridColumn width="28" headerText="S" dataField="ordinal" dataTipField="ordinalDescription" showDataTips="true" itemRenderer="com.pomodairo.components.CustomRenderer" /> -->
		</mx:columns>
	</mx:DataGrid>
	
	<mx:Button id="addPomoButton" label="Add New" click="onAddPomodoroClicked()" width="91" height="24" x="219" y="269"/>

</mx:Canvas>
