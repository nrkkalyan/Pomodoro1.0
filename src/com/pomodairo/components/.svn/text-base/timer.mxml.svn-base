<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="312" 
	height="94"  
	backgroundAlpha="0.0"
	initialize="init()"
	creationComplete="created()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
	
	    <mx:Script>
        <![CDATA[
			import com.pomodairo.ConfigProperty;
			import com.pomodairo.Pomodoro;
			import com.pomodairo.PomodoroEventDispatcher;
			import com.pomodairo.RegexUtils;
			import com.pomodairo.SoundPlayer;
			import com.pomodairo.TaskManager;
			import com.pomodairo.components.config.ConfigPanel;
			import com.pomodairo.components.config.SoundConfigPanel;
			import com.pomodairo.components.config.TimingConfigPanel;
			import com.pomodairo.db.Storage;
			import com.pomodairo.events.ConfigurationUpdatedEvent;
			import com.pomodairo.events.GuiChangeEvent;
			import com.pomodairo.events.PomodoroEvent;
			
			import flash.display.Sprite;
			import flash.events.TimerEvent;
			import flash.media.Sound;
			import flash.media.SoundChannel;
			import flash.utils.Timer;
			import flash.utils.getTimer;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.ColorPicker;
			import mx.controls.LinkButton;
			import mx.core.SoundAsset;
			import mx.effects.SoundEffect;
			import mx.effects.easing.Linear;
			import mx.effects.effectClasses.SoundEffectInstance;
			import mx.managers.PopUpManager;
			import mx.utils.ColorUtil;
		    
		    private static var DEFAULT:String = "default";
		    private static var TIME_OUT:String = "timeout";
		    private static var BREAK:String = "break";
			private static var BREAK_OVER:String = "break_over";
		    
		    [Bindable]
		    public var taskManager:TaskManager = TaskManager.instance;
						
			[Bindable]
			public var appTitle:String = "pomodairo";

            private const MIN_MASK:String = "00";
            private const SEC_MASK:String = "00";
            private const TIMER_INTERVAL:int = 10;
            private const DELAY_BEFORE_BREAK_STARTS:int = 5000; // Milliseconds

			[Bindable]
			public var pomodoroLengthInMinutes:Number = 25;
			
			[Bindable]
			public var shortBreakLengthInMinutes:Number = 10;
			
			[Bindable]
			public var longBreakLengthInMinutes:Number = 10;
			
			[Bindable]
			public var longBreakInterval:Number = 4;
			
			private var pomodoroCounter:Number = 0;
			
			private var urlToOpen:String = "";

            private var baseTimer:int;
            private var pomodoroTimer:Timer;
            private var breakTimer:Timer;
            
            private var blinkTimer:Timer = new Timer(300, 0);
            
            private var updateTaskbar:Boolean = true;
			
			private var soundPlayer:SoundPlayer = new SoundPlayer();
            
            private function init():void {
                pomodoroTimer = new Timer(TIMER_INTERVAL);
                pomodoroTimer.addEventListener(TimerEvent.TIMER, updateTimer);
                pomodoroTimer.addEventListener(TimerEvent.TIMER, updateAppTitle);
                
				breakTimer = new Timer(TIMER_INTERVAL);
                breakTimer.addEventListener(TimerEvent.TIMER, updateBreakTimer);   
                breakTimer.addEventListener(TimerEvent.TIMER, updateAppTitle); 

                PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);
                PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.START_BREAK, setBreakTitle);
                PomodoroEventDispatcher.getInstance().addEventListener(ConfigurationUpdatedEvent.UPDATED, onConfigurationChange);   	   	
            }
			
			
			/**
			 * This is the main function, will be called for every frame.
			 * Check if time is up and perform other timer-related tasks.
			 * 
			 */
			private function updateTimer(evt:TimerEvent):void {
            	if (getTimer() >= baseTimer) {
					soundPlayer.playAlarm();
            		sendEvent(PomodoroEvent.TIME_OUT, null);
					pomodoroCounter++;
            		pomodoroTimer.stop();
            		stopTicTocSound();
            		setTimerStyle(TIME_OUT);
            		scheduleBreakTimerStart();
            		startBlink();
					if (currentState == "minimal") {
						toggleMiniView();
					}
            	} else {
	                var d:Date = new Date(baseTimer - getTimer());
	                var min:String = (MIN_MASK + d.minutesUTC).substr(-MIN_MASK.length);
	                var sec:String = (SEC_MASK + d.secondsUTC).substr(-SEC_MASK.length);
	                counter.text = String(min + ":" + sec);
					miniCounter.text = String(min + ":" + sec);
					
					if (min == "00") {
						setTimerStyle(TIME_OUT);
					}
					
					if (timeProgressBar != null) {
						var progress:Number = Number(int(min)*60+int(sec));
						var totalTime:Number = pomodoroLengthInMinutes*60;
						timeProgressBar.setProgress(totalTime-progress, totalTime);
					}
	            }
            }
            
			private function updateBreakTimer(evt:TimerEvent):void 
			{
				// Check if break time is over
				if (pomodoroCounter % longBreakInterval == 0) {
					// Check long break
					if (getTimer() >= baseTimer + longBreakLengthInMinutes*60*1000) {
						trace("Long break over. Pomodoros so far: "+pomodoroCounter);
						startBlink();
						soundPlayer.playAlarm();
						breakTimer.stop();
					}
				} else {
					// Check short break 
					if (getTimer() >= baseTimer + shortBreakLengthInMinutes*60*1000) {
						trace("Short break over. Pomodoros so far: "+pomodoroCounter);
						startBlink();
						soundPlayer.playAlarm();
						breakTimer.stop();
					}
				}
				var d:Date = new Date(getTimer() - baseTimer);
				var min:String = (MIN_MASK + d.minutes).substr(-MIN_MASK.length);
				var sec:String = (SEC_MASK + (d.seconds)).substr(-SEC_MASK.length);
				counter.text = String(min + ":" + sec);
				miniCounter.text = String(min + ":" + sec);
			}
			
			private function created():void {
				counter.filters = [glow];
				miniCounter.filters = [glow];
			}
			
			/**
			 * This is triggered by an event that flags that a task has been selected.
			 * This can originate from multiple locations.
			 */
			private function onPomodoroSelected(e:PomodoroEvent):void {
				if (!e.pomodoro.done && !pomodoroTimer.running) {
					taskManager.setActive(e.pomodoro);
					stopBreakTimer();
					showStartButton();
				}
			}
			
			private function onConfigurationChange(e:ConfigurationUpdatedEvent):void {
				if (e.configElement.name == TimingConfigPanel.POMODORO_LENGTH) {
					pomodoroLengthInMinutes = new Number(e.configElement.value);
				}
				
				if (e.configElement.name == TimingConfigPanel.SHORT_BREAK_LENGTH) {
					shortBreakLengthInMinutes = new Number(e.configElement.value);
				}
				
				if (e.configElement.name == TimingConfigPanel.LONG_BREAK_LENGTH) {
					longBreakLengthInMinutes = new Number(e.configElement.value);
				}
				
				if (e.configElement.name == TimingConfigPanel.LONG_BREAK_INTERVAL) {
					longBreakInterval = new Number(e.configElement.value);
				}
				
				if (e.configElement.name == "urlToOpen") {
					urlToOpen = e.configElement.value;
				}
				
				if (e.configElement.name == ConfigPanel.UPDATE_TASKBAR) {
					this.updateTaskbar = e.configElement.value == "true";
					if (!updateTaskbar) {
						appTitle = "Pomodairo";
					}
				}
			}
			
			private function setTimerStyle(status:String):void {
				switch (status) {
					case DEFAULT:
						counter.setStyle("color", "Yellow");
						miniCounter.setStyle("color", "Yellow");
						glow.color = 16776960;
						counter.filters = [glow];
						miniCounter.filters = [glow];
						stopBlink();
						counter.visible = true;
						break;
						
					case TIME_OUT:
						counter.setStyle("color", "Red");
						miniCounter.setStyle("color", "Red");
						glow.color = 16711680;
						counter.filters = [glow];
						miniCounter.filters = [glow];
						break;
						
					case BREAK:
						counter.setStyle("color", "Green");
						miniCounter.setStyle("color", "Green");
						glow.color = 26112;
						counter.filters = [glow];
						miniCounter.filters = [glow];
						stopBlink();
						counter.visible = true;
						break;	
					
				}
			}
            
            private function startBreakTimer(evt:TimerEvent):void
            {
            	baseTimer = getTimer();
            	breakTimer.start();
            	setTimerStyle(BREAK);
            	showBreakButton();
            	pomodoroLabel.label = "On Break";
				sendEvent(PomodoroEvent.START_BREAK, "");
            }
            
            private function scheduleBreakTimerStart():void
            {
            	var delayBeforeBreakStartTimer:Timer = new Timer(DELAY_BEFORE_BREAK_STARTS, 1);
            	delayBeforeBreakStartTimer.addEventListener(TimerEvent.TIMER, startBreakTimer);
            	delayBeforeBreakStartTimer.start();
            }
            
            private function stopBreakTimer():void
            {
            	breakTimer.stop();
            	showStartButton();
            	sendEvent(PomodoroEvent.STOP_BREAK, null);
            }

            private function startTimer(event:Event = null):void {
            	setTimerStyle(DEFAULT);
                baseTimer = getTimer();
                baseTimer += pomodoroLengthInMinutes*60*1000+1000;
                // baseTimer += 5*1000;
                pomodoroTimer.start();
                showStopButton();
                hideCloseNextButton();
                
                // Dispatch event
                sendEvent(PomodoroEvent.START_POMODORO, null);
                
                // Play beautiful ticking sound
				soundPlayer.playTicTocSound();
            }
            
            private function updateAppTitle(evt:TimerEvent):void
            {
            	if (updateTaskbar) {
	            	var timer:Timer = evt.target as Timer;
	            	var d:Date = new Date(getTimer() - baseTimer);
		           	var remaining:String = String(d.minutesUTC)+"'";
	            	if(timer == pomodoroTimer) {            		
	            		d = new Date(baseTimer - getTimer());
	            		remaining = String(d.minutesUTC)+"'";
			           	if(d.minutes == 0) {
			           		remaining = String(d.seconds)+"''";
			           	}
	            	}
	            	if (!breakTimer.running) {
		            	var title:String = remaining+" "+taskManager.activeTask.name; 
		            	if (appTitle != title) {
		            		appTitle = title;
		            	}
	            	}
            	}
            }
            
            private function setBreakTitle(evt:Event=null):void
            {
            	if (updateTaskbar) {
	            	var title:String = "*break* "+taskManager.activeTask.name; 
	            	if (appTitle != title) {
	            		appTitle = title;
	            	}
            	}
            }
            
             private function sendEvent(type:String, value:String):void {
            	var event:PomodoroEvent = new PomodoroEvent(type);
				event.pomodoro = taskManager.activeTask;
				event.value = value;
				PomodoroEventDispatcher.getInstance().dispatchEvent(event);
            }
            
            private function showBreakButton():void
            {
        		startTimerButton.visible = false;
        		stopTimerButton.visible = false;
        		stopBreakButton.visible = true;
            }            
            
            private function showStartButton():void
            {
        		startTimerButton.visible = true;
        		stopTimerButton.visible = false;
        		stopBreakButton.visible = false;
        		newTaskButton.visible = false;
        		
        		counter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";
				miniCounter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";
        		var pomodoro:Pomodoro = taskManager.activeTask;
    			pomodoroLabel.label = pomodoro.shortDescription;
        		appTitle = "pomodairo";
        		setTimerStyle(DEFAULT);
            }
            
            private function showStopButton():void
            {
            	startTimerButton.visible = false;
            	stopTimerButton.visible = true;    
            	hideCloseNextButton();        	
            }
            
            private function showNewTaskButton():void
            {
            	startTimerButton.visible = false;
            	stopTimerButton.visible = false;
            	stopBreakButton.visible = false;
            	newTaskButton.visible = true; 
            	counter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";  
				miniCounter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";
            }            
            
            private function showNextTaskButton():void 
            {
            	closePomodoroButton.visible = false;
            	nextTaskButton.visible = true;
            }
            
            private function showClosePomoButton():void 
            {
            	closePomodoroButton.visible = true;
            	nextTaskButton.visible = false;
            }
            
            private function hideCloseNextButton():void
            {
            	closePomodoroButton.visible = false;
            	nextTaskButton.visible = false;
            }

			/**
			 * Stop the Timer
			 */
            private function stopTimer(event:Event=null):void {
                pomodoroTimer.stop();
                stopTicTocSound();
                showStartButton();
                sendEvent(PomodoroEvent.STOP_POMODORO, null);
            }
            
            private function createPomodoro():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_POMODORO;
            	input.selectAfterCreate = true;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
            private function setDoneSelectNextPomodoro():void {
				trace("Done / Next pomodoro.");
            }
            
            private function toTwoDigitString(number:int):String
            {
            	if (number < 10)
            	{
            		return ""+0+number;
            	}
            	return ""+number;
            }
			
            public function startBlink():void
	        {
	            blinkTimer.addEventListener(TimerEvent.TIMER, toggleText );
	            blinkTimer.start();
				if (currentState == "minimal") {
					toggleMiniView();
				}
	        }
	        
	        public function stopBlink():void
	        {
	            blinkTimer.stop();
	        }
	
	        public function toggleText( event:TimerEvent ):void
	        {
	        	counter.visible = !counter.visible;
	        }
	        
	        public function onClosePomoClicked(event:Event = null):void 
	        {
	        	// Mark done.
	        	var pomodoro:Pomodoro = taskManager.activeTask;
	        	pomodoro.done = true;     
	        	pomodoro.closed = new Date(); 	
	        	
	        	// Dispatch event.
	        	var doneEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.DONE);
				doneEvent.pomodoro = pomodoro;
				PomodoroEventDispatcher.getInstance().dispatchEvent(doneEvent);
				
				if(taskManager.hasMoreTasks()) {
					taskManager.nextTask();
	        		showNextTaskButton();
	   			}
	        }

	        public function onNextTaskClicked(event:Event = null):void 
	        {
	        	trace("Next task clicked...");
	        	var result:Boolean = taskManager.nextTask();
	        	if(!result) {
	        		trace("There is no next task!");
	        	}
	        }
	        
	        public function openBugtracker():void {
	        	var ticketId:int = new RegexUtils().extractHashNumber(taskManager.activeTask.name);
	        	if(ticketId > 0) {	        		
		        	var url:String = urlToOpen + ticketId;
		        	trace("Opening ticket #"+ticketId+" in browser...");
		        	navigateToURL(new URLRequest(url), 'quote');
	        	}
	        }
	        
	        private function stopTicTocSound():void {
				soundPlayer.stopTicTocSound();
	        }
			
			public function toggleMiniView():void {
				if (currentState == null) {
					currentState = "minimal";
				} else {
					currentState = null;
				}
				var evt:GuiChangeEvent = new GuiChangeEvent();
				evt.miniView = currentState == "minimal";
				PomodoroEventDispatcher.getInstance().dispatchEvent(evt);
			}

        ]]>
    </mx:Script>
    
    <mx:Style>
        @font-face 
        {
            font-family: Digital;
            src: url("assets/digital-7mono.ttf");
        }

        .ClockText 
        { 
            font-family: Digital; 
            font-size: 80pt;    
        }
		
		.MiniClockText 
		{ 
			font-family: Digital; 
			font-size: 28pt;    
		}

    </mx:Style>
	    <mx:states>
	    	    <mx:State name="minimal">
	    	    	    <mx:RemoveChild target="{counter}"/>
	    	    	    <mx:RemoveChild target="{newTaskButton}"/>
	    	    	    <mx:RemoveChild target="{pomodoroLabel}"/>
						<mx:RemoveChild target="{startTimerButton}"/>
						<mx:RemoveChild target="{stopTimerButton}"/>
						<mx:RemoveChild target="{stopBreakButton}"/>
						<mx:RemoveChild target="{newTaskButton}"/>
						<mx:SetProperty target="{miniCounter}" name="visible" value="true"/>
						<mx:AddChild position="lastChild">
							<mx:ProgressBar id="timeProgressBar" x="4" y="4" width="220" height="22" label="{taskManager.activeTask.shortDescription}" 
											labelPlacement="center" mode="manual"/>
						</mx:AddChild>
	    	    </mx:State>
	    </mx:states>
	
	<!--
	Glass effect wanted! =)
	<mx:Canvas id="clockBG" backgroundColor="#000000" x="4" y="4" height="80" width="190"/>
    -->
	<mx:Button id="startTimerButton" 	x="216" y="10" height="50" width="90" visible="false" 	label="Start Timer" click="startTimer()" />
	<mx:Button id="stopTimerButton" 	x="216" y="10" height="50" width="90" visible="false" 	label="Stop Timer" click="stopTimer();showNextTaskButton();" />
	<mx:Button id="stopBreakButton" 	x="216" y="10" height="50" width="90" visible="false" 	label="Stop Break" click="stopBreakTimer();showClosePomoButton();"	/>
	<mx:Button id="newTaskButton" 		x="216" y="10" height="50" width="90" 					label="New Task" click="createPomodoro()" />
	
	<!-- Clock Counter(s) -->
	<!-- Regular Counter -->
	<mx:Label id="counter" x="6" y="0" height="69" styleName="ClockText" text="{toTwoDigitString(pomodoroLengthInMinutes)}:00" color="#FFFF00" />
	<mx:GlowFilter id="glow" color="#FFFF00" alpha="1" blurX="8" blurY="8" strength="1"/>
	<mx:LinkButton id="pomodoroLabel" y="78" label="{taskManager.activeTask.shortDescription}" width="90%" height="17" click="openBugtracker()" textAlign="left" x="10" toolTip="{taskManager.activeTask.longDescription}"/>
	
	<mx:Button id="closePomodoroButton" x="216" y="70" height="25" width="90" visible="false" label="Done" click="onClosePomoClicked()" />
	<mx:Button id="nextTaskButton" 		x="216" y="70" height="25" width="90" visible="false" label="Next" click="onNextTaskClicked()" />
	
	<!-- Mini View Objects (not visible by default) -->
	<mx:Label id="miniCounter" x="240" y="0" styleName="MiniClockText" text="{toTwoDigitString(pomodoroLengthInMinutes)}:00" color="#FFFF00" visible="false"/>
	
</mx:Canvas>


